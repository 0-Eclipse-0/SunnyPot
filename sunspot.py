#!/usr/bin/python3

import socket
import re
import os, signal
from datetime import datetime
from sys import exit
from time import sleep

# _______ Variables _________

if (os.path.exists("config.txt")):
    quick_config = True
else:
    quick_config = False

sp, er = "[SunnyPot] ", "[Error] "

        # Hex for fake html message (for http/https)
faux_site = bytearray.fromhex("""
3c68746d6c3e0a3c686561643e0a3c7469746c653e4c6f67696e3c2f7469746c653e0a3c6c696e6b2072656c3d227374796c6573686565742220687265663d2268747470733a2f2f737461636b706174682e626f6f74737472617063646e2e636f6d2f626f6f7473747261702f342e332e312f6373732f626f6f7473747261702e6d696e2e6373732220696e746567726974793d227368613338342d67674f795230695843624d5176335869706d6133344d442b64482f3166513738342f6a3663592f694a5451554f686357723778394a766f527854324d5a773154222063726f73736f726967696e3d22616e6f6e796d6f7573223e0a3c7374796c653e0a2020626f6479207b0a202020206261636b67726f756e643a20234433443344333b0a202020202020666f6e742d73697a653a20313870783b672f434c486d33414967415367424b41492f6237527276654132303232794a79664f395279527676374c6a4a514553756b474873734855785654687a772229206e6f2d7265706561742063656e7465722063656e7465722066697865643b0a202020206261636b67726f756e642d73697a653a20636f7665723b0a20202020666f6e742d66616d696c793a202256657264616e61223b0a202020202d7765626b69742d666f6e742d736d6f6f7468696e673a20616e7469616c69617365643b0a202020202d6d6f7a2d6f73782d666f6e742d736d6f6f7468696e673a20677261797363616c653b0a20202020263a3a6265666f7265207b0a2020202020207a2d696e6465783a202d313b0a202020202020636f6e74656e743a2027273b0a202020202020706f736974696f6e3a2066697865643b0a202020202020746f703a20303b0a2020202020206c6566743a20303b0a2020202020206261636b67726f756e643a20234433443344333b0a2020202020202f2a2049452046616c6c6261636b202a2f0a2020202020206261636b67726f756e643a20726762612836382c3139362c3233312c20302e38293b0a20202020202077696474683a20313030253b0a2020202020206865696768743a20313030253b0a202020207d0a20207d0a0a20202e666f726d207b0a20202020626f726465722d7261646975733a20323570783b0a20202020706f736974696f6e3a206162736f6c7574653b0a20202020746f703a203530253b0a202020206c6566743a203530253b0a202020206261636b67726f756e643a20236666663b0a2020202077696474683a2034303070783b0a202020206d617267696e3a202d313430707820302030202d31383270783b0a2020202070616464696e673a20343070783b0a20202020626f782d736861646f773a2030203020357078207267626128302c20302c20302c20302e33293b0a202020206833207b0a2020202020206d617267696e3a2030203020383070783b0a2020202020206d617267696e2d626f74746f6d3a383070783b0a2020202020206c696e652d6865696768743a20313b0a202020202020666f6e742d7374796c653a20626f6c643b0a202020202020636f6c0a202020202020666f6e742d7765696768743a203630303b0a202020207d0a20202020696e707574207b0a2020202020206d617267696e2d626f74746f6d3a333070783b0a2020202020206f75746c696e653a206e6f6e653b0a202020202020646973706c61793a20626c6f636b3b0a20202020202077696474683a20313030253b0a2020202020206d617267696e3a2030203020323070783b0a20202020202070616464696e673a203130707820313570783b0a202020202020626f726465723a2031707820736f6c696420236363633b0a202020202020636f6c6f723a20236363633b0a202020202020666f6e742d66616d696c793a202256657264616e61223b0a202020202020626f782d73697a696e673a20626f726465722d626f783b0a202020202020666f6e742d73697a653a20313470783b0a202020202020666f6e742d7769656768743a203430303b0a2020202020202d7765626b69742d666f6e742d736d6f6f7468696e673a20616e7469616c69617365643b0a2020202020202d6d6f7a2d6f73782d666f6e742d736d6f6f7468696e673a20677261797363616c653b0a2020202020207472616e736974696f6e3a20302e3273206c696e6561723b0a20202020202026696e7075743a666f637573207b0a2020202020202020636f6c6f723a20233333333b0a2020202020202020626f726465723a2031707820736f6c696420234433443344333b0a2020202020207d0a202020207d0a20202020627574746f6e207b0a202020202020637572736f723a20706f696e7465723b0a2020202020206261636b67726f756e643a20234646374637463b0a20202020202077696474683a20313030253b0a20202020202070616464696e673a203130707820313570783b0a202020202020626f726465723a20303b0a202020202020636f6c6f723a20236666663b0a202020202020666f6e742d66616d696c793a202256657264616e61223b0a202020202020666f6e742d73697a653a20313470783b0a202020202020666f6e742d7765696768743a203430303b0a202020202020263a686f766572207b0a20202020202020206261636b67726f756e643a20233336396362383b0a2020202020207d0a7d0a7d0a2e6572726f722c202e76616c69647b646973706c61793a6e6f6e653b7d0a3c2f7374796c653e0a3c2f686561643e0a3c626f64793e0a3c73656374696f6e20636c6173733d22666f726d20616e696d6174656420666c6970496e58223e0a3c6833207374796c653d22666f6e742d7765696768743a626f6c643b746578742d616c69676e3a63656e7465723b636f6c6f723a234139413941393b223e4c6f67696e20466f726d3c2f68333e0a3c7020636c6173733d2276616c696422207374796c653d22746578742d616c69676e3a63656e7465723b636f6c6f723a234131413141313b223e4c6f6767696e6720696e2e2e2e3c2f703e0a3c702069643d22666175782220636c6173733d226572726f7222207374796c653d22746578742d616c69676e3a63656e7465723b636f6c6f723a234131413141313b223e4572726f722e20496e76616c696420557365726e616d65206f722050617373776f72642e3c2f703e0a3c63656e7465723e0a3c666f726d20636c6173733d226c6f67696e626f7822206175746f636f6d706c6574653d226f6666223e0a3c696e70757420706c616365686f6c6465723d22557365726e616d6522207374796c653d226d617267696e2d746f703a313570783b2220747970653d22746578742220636c6173733d22666f726d2d636f6e74726f6c222069643d22757365726e616d65223e3c2f696e7075743e0a3c696e70757420706c616365686f6c6465723d2250617373776f726422207374796c653d226d617267696e2d746f703a313570783b22747970653d2270617373776f72642220636c6173733d22666f726d2d636f6e74726f6c222069643d2270617373776f7264223e3c2f696e7075743e0a3c627574746f6e20747970653d22627574746f6e2220636c6173733d2262746e2062746e2d7365636f6e64617279222069643d227375626d697422206f6e636c69636b3d22646f63756d656e742e676574456c656d656e744279496428276661757827292e7374796c652e646973706c6179203d2027626c6f636b273b0a22207374796c653d226d617267696e2d746f703a313070783b223e4c6f67696e3c2f627574746f6e3e0a3c2f63656e7465723e0a3c2f666f726d3e0a3c2f73656374696f6e3e0a3c736372697074207372633d2268747470733a2f2f616a61782e676f6f676c65617069732e636f6d2f616a61782f6c6962732f6a71756572792f332e352e312f6a71756572792e6d696e2e6a73223e3c2f7363726970743e0a3c73637269707420747970653d22746578742f6a617661736372697074223e0a2428646f63756d656e74292e72656164792866756e6374696f6e2829207b0a2020242827237375626d697427292e636c69636b2866756e6374696f6e2829207b0a202020206576656e742e70726576656e7444656661756c7428293b0a202020207661722056616c6964456d61696c203d2024282723757365726e616d6527292e76616c2829203d3d3d2027726f6f74273b0a202020207661722056616c696450617373776f7264203d202428272370617373776f726427292e76616c2829203d3d3d20277277756a77656b6671666832333934303230333966693032392d32322a3733273b0a202020206966202856616c6964456d61696c203d3d3d20747275652026262056616c696450617373776f7264203d3d3d207472756529207b0a2020202020202428272e76616c696427292e6373732827646973706c6179272c2027626c6f636b27293b0a20202020202077696e646f772e6c6f636174696f6e203d202268747470733a2f2f676f6f676c652e636f6d220a202020203b7d20656c7365207b0a2020202020202428272e6572726f7227292e6373732827646973706c6179272c2027626c6f636b27290a202020203b7d0a20207d293b0a7d293b0a3c2f7363726970743e0a3c2f626f64793e0a3c2f68746d6c3e""").decode().encode('utf-8')

sunnypot = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# _______ Occurence Handling ________

def signal_handler(signal, frame):
    sunnypot.close()
    if (os.path.exists("logs/ip_log")):
        os.remove(os.getcwd() +"/logs/ip_log")
    exit("\n" + sp + "Closing socket and exiting...")

signal.signal(signal.SIGINT, signal_handler)

# _______ Functions _________

def clear():
    print('\033[2J\033[1;1H')

def get_host_ip():
    try:
        host_ip = socket.gethostbyname(socket.gethostname())
        if host_ip == "127.0.0.1":
            host_ip = input(sp + " Could not resolve IP, enter IP manually: ") # Can't open honeypot
            if re.match(r"^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$", host_ip): # Valid input ip
                pass
            else: # Invalid input ip
                exit(er + "Invalid IP Address. Exiting...")
        else:
            pass # Pass
    except Exception:
        exit(er + "Error resolving hostname...")
        sunnypot.close()
    return host_ip

# def format_header(header):
#     pass

def logging():
    if os.path.isdir("logs"):
        pass
    else:
        os.mkdir("logs")

# def build_config():
#     print("Test\n")
#     pass

# def detection():  # Detects DDoS/DoS or Brute force attacks
#     pass

def start_pot(ip, port):
    sunnypot.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

    try:
        sunnypot.bind((ip,port))
    except OSError:
        exit(er + "Cannot assign specific address. Exiting...")

    logging()
    dir = os.getcwd() + "/logs/ip_log"
    sunnypot.listen(5)

    if port == (80 | 443):
        msg = faux_site
    else:
        msg = ("[%s] Access Denied: Insufficient permission to connect to %s:%i\n" % (str(datetime.now().strftime('%H:%M')), ip, port)).encode("utf-8")

    while True:
        sleep(1)
        attacker, (attacker_ip, attacker_port) = sunnypot.accept()
        print("-"*6, "Intrusion Detected", "-"*6, "\a\a\a")
        print("Connection from: %s:%s" % (attacker_ip, attacker_port))
        attacker.send(msg)
        with open(dir, "a") as iplog:
            iplog.write(attacker_ip + "\n")
        attacker.close()

# ______ Main ______
if (quick_config):
    print(sp + "Running from config file, delete the file before compiling again if you'd like to run in single-use mode or modify the file...\n")
    sleep(5)
    clear()
    config_vars()
else:
    #print(datetime.now().strftime('%H:%M'))
    clear()
    mode = input(sp + "Select Mode (1 = Single-Use, 2 = Config Builder) >> ")

    if (mode == "1"):
        pot_ip = get_host_ip()

        try:
            pot_port = int(input(sp + "Enter Port >> "))
        except ValueError:
            exit(er + "Not a port! Exiting...")
        finally:
            if (0 < pot_port <= 65535):
                pass
            else:
                exit(er + "Port must be between 1 and 65,535. Exiting...")

        start_pot(pot_ip, pot_port)

    elif (mode == "2"):
        build_config()
    else:
        exit(er + "Invalid option. Exitting...")
